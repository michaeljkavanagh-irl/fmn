/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { timer } from 'rxjs';
import { NgxFileDropEntry } from './ngx-file-drop-entry';
import { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';
export class NgxFileDropComponent {
    /**
     * @param {?} zone
     * @param {?} renderer
     */
    constructor(zone, renderer) {
        this.zone = zone;
        this.renderer = renderer;
        this.accept = '*';
        this.directory = false;
        this.multiple = true;
        this.dropZoneLabel = '';
        this.dropZoneClassName = 'ngx-file-drop__drop-zone';
        this.contentClassName = 'ngx-file-drop__content';
        this.showBrowseBtn = false;
        this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';
        this.browseBtnLabel = 'Browse files';
        this.onFileDrop = new EventEmitter();
        this.onFileOver = new EventEmitter();
        this.onFileLeave = new EventEmitter();
        this.isDraggingOverDropZone = false;
        this.globalDraggingInProgress = false;
        this.files = [];
        this.numOfActiveReadEntries = 0;
        this.helperFormEl = null;
        this.fileInputPlaceholderEl = null;
        this.dropEventTimerSubscription = null;
        this._disabled = false;
        this.openFileSelector = (/**
         * @param {?=} event
         * @return {?}
         */
        (event) => {
            if (this.fileSelector && this.fileSelector.nativeElement) {
                ((/** @type {?} */ (this.fileSelector.nativeElement))).click();
            }
        });
        this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.globalDraggingInProgress = true;
        }));
        this.globalDragEndListener = this.renderer.listen('document', 'dragend', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.globalDraggingInProgress = false;
        }));
    }
    /**
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = (value != null && `${value}` !== 'false');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.dropEventTimerSubscription) {
            this.dropEventTimerSubscription.unsubscribe();
            this.dropEventTimerSubscription = null;
        }
        this.globalDragStartListener();
        this.globalDragEndListener();
        this.files = [];
        this.helperFormEl = null;
        this.fileInputPlaceholderEl = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        if (!this.isDropzoneDisabled()) {
            if (!this.isDraggingOverDropZone) {
                this.isDraggingOverDropZone = true;
                this.onFileOver.emit(event);
            }
            this.preventAndStop(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        if (!this.isDropzoneDisabled()) {
            if (this.isDraggingOverDropZone) {
                this.isDraggingOverDropZone = false;
                this.onFileLeave.emit(event);
            }
            this.preventAndStop(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropFiles(event) {
        if (!this.isDropzoneDisabled()) {
            this.isDraggingOverDropZone = false;
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = 'copy';
                /** @type {?} */
                let items;
                if (event.dataTransfer.items) {
                    items = event.dataTransfer.items;
                }
                else {
                    items = event.dataTransfer.files;
                }
                this.preventAndStop(event);
                this.checkFiles(items);
            }
        }
    }
    /**
     * Processes the change event of the file input and adds the given files.
     * @param {?} event
     * @return {?}
     */
    uploadFiles(event) {
        if (!this.isDropzoneDisabled()) {
            if (event.target) {
                /** @type {?} */
                const items = ((/** @type {?} */ (event.target))).files || ((/** @type {?} */ ([])));
                this.checkFiles(items);
                this.resetFileInput();
            }
        }
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    checkFiles(items) {
        for (let i = 0; i < items.length; i++) {
            /** @type {?} */
            const item = items[i];
            /** @type {?} */
            let entry = null;
            if (this.canGetAsEntry(item)) {
                entry = item.webkitGetAsEntry();
            }
            if (!entry) {
                if (item) {
                    /** @type {?} */
                    const fakeFileEntry = {
                        name: ((/** @type {?} */ (item))).name,
                        isDirectory: false,
                        isFile: true,
                        file: (/**
                         * @param {?} callback
                         * @return {?}
                         */
                        (callback) => {
                            callback((/** @type {?} */ (item)));
                        }),
                    };
                    /** @type {?} */
                    const toUpload = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);
                    this.addToQueue(toUpload);
                }
            }
            else {
                if (entry.isFile) {
                    /** @type {?} */
                    const toUpload = new NgxFileDropEntry(entry.name, entry);
                    this.addToQueue(toUpload);
                }
                else if (entry.isDirectory) {
                    this.traverseFileTree(entry, entry.name);
                }
            }
        }
        if (this.dropEventTimerSubscription) {
            this.dropEventTimerSubscription.unsubscribe();
        }
        this.dropEventTimerSubscription = timer(200, 200)
            .subscribe((/**
         * @return {?}
         */
        () => {
            if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {
                /** @type {?} */
                const files = this.files;
                this.files = [];
                this.onFileDrop.emit(files);
            }
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    traverseFileTree(item, path) {
        if (item.isFile) {
            /** @type {?} */
            const toUpload = new NgxFileDropEntry(path, item);
            this.files.push(toUpload);
        }
        else {
            path = path + '/';
            /** @type {?} */
            const dirReader = ((/** @type {?} */ (item))).createReader();
            /** @type {?} */
            let entries = [];
            /** @type {?} */
            const readEntries = (/**
             * @return {?}
             */
            () => {
                this.numOfActiveReadEntries++;
                dirReader.readEntries((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    if (!result.length) {
                        // add empty folders
                        if (entries.length === 0) {
                            /** @type {?} */
                            const toUpload = new NgxFileDropEntry(path, item);
                            this.zone.run((/**
                             * @return {?}
                             */
                            () => {
                                this.addToQueue(toUpload);
                            }));
                        }
                        else {
                            for (let i = 0; i < entries.length; i++) {
                                this.zone.run((/**
                                 * @return {?}
                                 */
                                () => {
                                    this.traverseFileTree(entries[i], path + entries[i].name);
                                }));
                            }
                        }
                    }
                    else {
                        // continue with the reading
                        entries = entries.concat(result);
                        readEntries();
                    }
                    this.numOfActiveReadEntries--;
                }));
            });
            readEntries();
        }
    }
    /**
     * Clears any added files from the file input element so the same file can subsequently be added multiple times.
     * @private
     * @return {?}
     */
    resetFileInput() {
        if (this.fileSelector && this.fileSelector.nativeElement) {
            /** @type {?} */
            const fileInputEl = (/** @type {?} */ (this.fileSelector.nativeElement));
            /** @type {?} */
            const fileInputContainerEl = fileInputEl.parentElement;
            /** @type {?} */
            const helperFormEl = this.getHelperFormElement();
            /** @type {?} */
            const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();
            // Just a quick check so we do not mess up the DOM (will never happen though).
            if (fileInputContainerEl !== helperFormEl) {
                // Insert the form input placeholder in the DOM before the form input element.
                this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);
                // Add the form input as child of the temporary form element, removing the form input from the DOM.
                this.renderer.appendChild(helperFormEl, fileInputEl);
                // Reset the form, thus clearing the input element of any files.
                helperFormEl.reset();
                // Add the file input back to the DOM in place of the file input placeholder element.
                this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);
                // Remove the input placeholder from the DOM
                this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);
            }
        }
    }
    /**
     * Get a cached HTML form element as a helper element to clear the file input element.
     * @private
     * @return {?}
     */
    getHelperFormElement() {
        if (!this.helperFormEl) {
            this.helperFormEl = (/** @type {?} */ (this.renderer.createElement('form')));
        }
        return this.helperFormEl;
    }
    /**
     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
     * @private
     * @return {?}
     */
    getFileInputPlaceholderElement() {
        if (!this.fileInputPlaceholderEl) {
            this.fileInputPlaceholderEl = (/** @type {?} */ (this.renderer.createElement('div')));
        }
        return this.fileInputPlaceholderEl;
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    canGetAsEntry(item) {
        return !!item.webkitGetAsEntry;
    }
    /**
     * @private
     * @return {?}
     */
    isDropzoneDisabled() {
        return (this.globalDraggingInProgress || this.disabled);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    addToQueue(item) {
        this.files.push(item);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    preventAndStop(event) {
        event.stopPropagation();
        event.preventDefault();
    }
}
NgxFileDropComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-file-drop',
                template: "<div [className]=\"dropZoneClassName\"\r\n     [class.ngx-file-drop__drop-zone--over]=\"isDraggingOverDropZone\"\r\n     (drop)=\"dropFiles($event)\"\r\n     (dragover)=\"onDragOver($event)\"\r\n     (dragleave)=\"onDragLeave($event)\">\r\n  <div [className]=\"contentClassName\">\r\n    <input \r\n      type=\"file\" \r\n      #fileSelector \r\n      [accept]=\"accept\" \r\n      [attr.directory]=\"directory || undefined\" \r\n      [attr.webkitdirectory]=\"directory || undefined\"\r\n      [attr.mozdirectory]=\"directory || undefined\"\r\n      [attr.msdirectory]=\"directory || undefined\"\r\n      [attr.odirectory]=\"directory || undefined\"\r\n      [multiple]=\"multiple\"\r\n      (change)=\"uploadFiles($event)\" \r\n      class=\"ngx-file-drop__file-input\" \r\n    />\r\n\r\n    <ng-template #defaultContentTemplate>\r\n      <div *ngIf=\"dropZoneLabel\" class=\"ngx-file-drop__drop-zone-label\">{{dropZoneLabel}}</div>\r\n      <div *ngIf=\"showBrowseBtn\">\r\n        <input type=\"button\" [className]=\"browseBtnClassName\" value=\"{{browseBtnLabel}}\" (click)=\"openFileSelector($event)\" />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template\r\n      [ngTemplateOutlet]=\"contentTemplate || defaultContentTemplate\"\r\n      [ngTemplateOutletContext]=\"{ openFileSelector: openFileSelector }\">\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n",
                styles: [".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:rgba(147,147,147,.5)}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}"]
            }] }
];
/** @nocollapse */
NgxFileDropComponent.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 }
];
NgxFileDropComponent.propDecorators = {
    accept: [{ type: Input }],
    directory: [{ type: Input }],
    multiple: [{ type: Input }],
    dropZoneLabel: [{ type: Input }],
    dropZoneClassName: [{ type: Input }],
    contentClassName: [{ type: Input }],
    disabled: [{ type: Input }],
    showBrowseBtn: [{ type: Input }],
    browseBtnClassName: [{ type: Input }],
    browseBtnLabel: [{ type: Input }],
    onFileDrop: [{ type: Output }],
    onFileOver: [{ type: Output }],
    onFileLeave: [{ type: Output }],
    contentTemplate: [{ type: ContentChild, args: [NgxFileDropContentTemplateDirective, { read: TemplateRef, static: false },] }],
    fileSelector: [{ type: ViewChild, args: ['fileSelector', { static: true },] }]
};
if (false) {
    /** @type {?} */
    NgxFileDropComponent.prototype.accept;
    /** @type {?} */
    NgxFileDropComponent.prototype.directory;
    /** @type {?} */
    NgxFileDropComponent.prototype.multiple;
    /** @type {?} */
    NgxFileDropComponent.prototype.dropZoneLabel;
    /** @type {?} */
    NgxFileDropComponent.prototype.dropZoneClassName;
    /** @type {?} */
    NgxFileDropComponent.prototype.contentClassName;
    /** @type {?} */
    NgxFileDropComponent.prototype.showBrowseBtn;
    /** @type {?} */
    NgxFileDropComponent.prototype.browseBtnClassName;
    /** @type {?} */
    NgxFileDropComponent.prototype.browseBtnLabel;
    /** @type {?} */
    NgxFileDropComponent.prototype.onFileDrop;
    /** @type {?} */
    NgxFileDropComponent.prototype.onFileOver;
    /** @type {?} */
    NgxFileDropComponent.prototype.onFileLeave;
    /** @type {?} */
    NgxFileDropComponent.prototype.contentTemplate;
    /** @type {?} */
    NgxFileDropComponent.prototype.fileSelector;
    /** @type {?} */
    NgxFileDropComponent.prototype.isDraggingOverDropZone;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.globalDraggingInProgress;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.globalDragStartListener;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.globalDragEndListener;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.files;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.numOfActiveReadEntries;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.helperFormEl;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.fileInputPlaceholderEl;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.dropEventTimerSubscription;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype._disabled;
    /** @type {?} */
    NgxFileDropComponent.prototype.openFileSelector;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NgxFileDropComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,