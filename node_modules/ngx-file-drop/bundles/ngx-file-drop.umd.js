(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-file-drop', ['exports', 'rxjs', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-file-drop'] = {}),global.rxjs,global.ng.core,global.ng.common));
}(this, (function (exports,rxjs,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */
    var /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */ NgxFileDropEntry = /** @class */ (function () {
        function NgxFileDropEntry(relativePath, fileEntry) {
            this.relativePath = relativePath;
            this.fileEntry = fileEntry;
        }
        return NgxFileDropEntry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxFileDropContentTemplateDirective = /** @class */ (function () {
        function NgxFileDropContentTemplateDirective(template) {
            this.template = template;
        }
        NgxFileDropContentTemplateDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngx-file-drop-content-tmp]' },] }
        ];
        /** @nocollapse */
        NgxFileDropContentTemplateDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return NgxFileDropContentTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxFileDropComponent = /** @class */ (function () {
        function NgxFileDropComponent(zone, renderer) {
            var _this = this;
            this.zone = zone;
            this.renderer = renderer;
            this.accept = '*';
            this.directory = false;
            this.multiple = true;
            this.dropZoneLabel = '';
            this.dropZoneClassName = 'ngx-file-drop__drop-zone';
            this.contentClassName = 'ngx-file-drop__content';
            this.showBrowseBtn = false;
            this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';
            this.browseBtnLabel = 'Browse files';
            this.onFileDrop = new core.EventEmitter();
            this.onFileOver = new core.EventEmitter();
            this.onFileLeave = new core.EventEmitter();
            this.isDraggingOverDropZone = false;
            this.globalDraggingInProgress = false;
            this.files = [];
            this.numOfActiveReadEntries = 0;
            this.helperFormEl = null;
            this.fileInputPlaceholderEl = null;
            this.dropEventTimerSubscription = null;
            this._disabled = false;
            this.openFileSelector = ( /**
             * @param {?=} event
             * @return {?}
             */function (event) {
                if (_this.fileSelector && _this.fileSelector.nativeElement) {
                    (( /** @type {?} */(_this.fileSelector.nativeElement))).click();
                }
            });
            this.globalDragStartListener = this.renderer.listen('document', 'dragstart', ( /**
             * @param {?} evt
             * @return {?}
             */function (evt) {
                _this.globalDraggingInProgress = true;
            }));
            this.globalDragEndListener = this.renderer.listen('document', 'dragend', ( /**
             * @param {?} evt
             * @return {?}
             */function (evt) {
                _this.globalDraggingInProgress = false;
            }));
        }
        Object.defineProperty(NgxFileDropComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () { return this._disabled; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = (value != null && "" + value !== 'false');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxFileDropComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.dropEventTimerSubscription) {
                    this.dropEventTimerSubscription.unsubscribe();
                    this.dropEventTimerSubscription = null;
                }
                this.globalDragStartListener();
                this.globalDragEndListener();
                this.files = [];
                this.helperFormEl = null;
                this.fileInputPlaceholderEl = null;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxFileDropComponent.prototype.onDragOver = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (!this.isDraggingOverDropZone) {
                        this.isDraggingOverDropZone = true;
                        this.onFileOver.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxFileDropComponent.prototype.onDragLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (this.isDraggingOverDropZone) {
                        this.isDraggingOverDropZone = false;
                        this.onFileLeave.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxFileDropComponent.prototype.dropFiles = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    this.isDraggingOverDropZone = false;
                    if (event.dataTransfer) {
                        event.dataTransfer.dropEffect = 'copy';
                        /** @type {?} */
                        var items = void 0;
                        if (event.dataTransfer.items) {
                            items = event.dataTransfer.items;
                        }
                        else {
                            items = event.dataTransfer.files;
                        }
                        this.preventAndStop(event);
                        this.checkFiles(items);
                    }
                }
            };
        /**
         * Processes the change event of the file input and adds the given files.
         * @param Event event
         */
        /**
         * Processes the change event of the file input and adds the given files.
         * @param {?} event
         * @return {?}
         */
        NgxFileDropComponent.prototype.uploadFiles = /**
         * Processes the change event of the file input and adds the given files.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (event.target) {
                        /** @type {?} */
                        var items = (( /** @type {?} */(event.target))).files || (( /** @type {?} */([])));
                        this.checkFiles(items);
                        this.resetFileInput();
                    }
                }
            };
        /**
         * @private
         * @param {?} items
         * @return {?}
         */
        NgxFileDropComponent.prototype.checkFiles = /**
         * @private
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var item = items[i];
                    /** @type {?} */
                    var entry = null;
                    if (this_1.canGetAsEntry(item)) {
                        entry = item.webkitGetAsEntry();
                    }
                    if (!entry) {
                        if (item) {
                            /** @type {?} */
                            var fakeFileEntry = {
                                name: (( /** @type {?} */(item))).name,
                                isDirectory: false,
                                isFile: true,
                                file: ( /**
                                 * @param {?} callback
                                 * @return {?}
                                 */function (callback) {
                                    callback(( /** @type {?} */(item)));
                                }),
                            };
                            /** @type {?} */
                            var toUpload = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);
                            this_1.addToQueue(toUpload);
                        }
                    }
                    else {
                        if (entry.isFile) {
                            /** @type {?} */
                            var toUpload = new NgxFileDropEntry(entry.name, entry);
                            this_1.addToQueue(toUpload);
                        }
                        else if (entry.isDirectory) {
                            this_1.traverseFileTree(entry, entry.name);
                        }
                    }
                };
                var this_1 = this;
                for (var i = 0; i < items.length; i++) {
                    _loop_1(i);
                }
                if (this.dropEventTimerSubscription) {
                    this.dropEventTimerSubscription.unsubscribe();
                }
                this.dropEventTimerSubscription = rxjs.timer(200, 200)
                    .subscribe(( /**
             * @return {?}
             */function () {
                    if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                        /** @type {?} */
                        var files = _this.files;
                        _this.files = [];
                        _this.onFileDrop.emit(files);
                    }
                }));
            };
        /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        NgxFileDropComponent.prototype.traverseFileTree = /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
            function (item, path) {
                var _this = this;
                if (item.isFile) {
                    /** @type {?} */
                    var toUpload = new NgxFileDropEntry(path, item);
                    this.files.push(toUpload);
                }
                else {
                    path = path + '/';
                    /** @type {?} */
                    var dirReader_1 = (( /** @type {?} */(item))).createReader();
                    /** @type {?} */
                    var entries_1 = [];
                    /** @type {?} */
                    var readEntries_1 = ( /**
                     * @return {?}
                     */function () {
                        _this.numOfActiveReadEntries++;
                        dirReader_1.readEntries(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            if (!result.length) {
                                // add empty folders
                                if (entries_1.length === 0) {
                                    /** @type {?} */
                                    var toUpload_1 = new NgxFileDropEntry(path, item);
                                    _this.zone.run(( /**
                                     * @return {?}
                                     */function () {
                                        _this.addToQueue(toUpload_1);
                                    }));
                                }
                                else {
                                    var _loop_2 = function (i) {
                                        _this.zone.run(( /**
                                         * @return {?}
                                         */function () {
                                            _this.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                        }));
                                    };
                                    for (var i = 0; i < entries_1.length; i++) {
                                        _loop_2(i);
                                    }
                                }
                            }
                            else {
                                // continue with the reading
                                entries_1 = entries_1.concat(result);
                                readEntries_1();
                            }
                            _this.numOfActiveReadEntries--;
                        }));
                    });
                    readEntries_1();
                }
            };
        /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         */
        /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         * @private
         * @return {?}
         */
        NgxFileDropComponent.prototype.resetFileInput = /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         * @private
         * @return {?}
         */
            function () {
                if (this.fileSelector && this.fileSelector.nativeElement) {
                    /** @type {?} */
                    var fileInputEl = ( /** @type {?} */(this.fileSelector.nativeElement));
                    /** @type {?} */
                    var fileInputContainerEl = fileInputEl.parentElement;
                    /** @type {?} */
                    var helperFormEl = this.getHelperFormElement();
                    /** @type {?} */
                    var fileInputPlaceholderEl = this.getFileInputPlaceholderElement();
                    // Just a quick check so we do not mess up the DOM (will never happen though).
                    if (fileInputContainerEl !== helperFormEl) {
                        // Insert the form input placeholder in the DOM before the form input element.
                        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);
                        // Add the form input as child of the temporary form element, removing the form input from the DOM.
                        this.renderer.appendChild(helperFormEl, fileInputEl);
                        // Reset the form, thus clearing the input element of any files.
                        helperFormEl.reset();
                        // Add the file input back to the DOM in place of the file input placeholder element.
                        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);
                        // Remove the input placeholder from the DOM
                        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);
                    }
                }
            };
        /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         */
        /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         * @private
         * @return {?}
         */
        NgxFileDropComponent.prototype.getHelperFormElement = /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         * @private
         * @return {?}
         */
            function () {
                if (!this.helperFormEl) {
                    this.helperFormEl = ( /** @type {?} */(this.renderer.createElement('form')));
                }
                return this.helperFormEl;
            };
        /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         */
        /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         * @private
         * @return {?}
         */
        NgxFileDropComponent.prototype.getFileInputPlaceholderElement = /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         * @private
         * @return {?}
         */
            function () {
                if (!this.fileInputPlaceholderEl) {
                    this.fileInputPlaceholderEl = ( /** @type {?} */(this.renderer.createElement('div')));
                }
                return this.fileInputPlaceholderEl;
            };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        NgxFileDropComponent.prototype.canGetAsEntry = /**
         * @private
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return !!item.webkitGetAsEntry;
            };
        /**
         * @private
         * @return {?}
         */
        NgxFileDropComponent.prototype.isDropzoneDisabled = /**
         * @private
         * @return {?}
         */
            function () {
                return (this.globalDraggingInProgress || this.disabled);
            };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        NgxFileDropComponent.prototype.addToQueue = /**
         * @private
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.files.push(item);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NgxFileDropComponent.prototype.preventAndStop = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                event.preventDefault();
            };
        NgxFileDropComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-file-drop',
                        template: "<div [className]=\"dropZoneClassName\"\r\n     [class.ngx-file-drop__drop-zone--over]=\"isDraggingOverDropZone\"\r\n     (drop)=\"dropFiles($event)\"\r\n     (dragover)=\"onDragOver($event)\"\r\n     (dragleave)=\"onDragLeave($event)\">\r\n  <div [className]=\"contentClassName\">\r\n    <input \r\n      type=\"file\" \r\n      #fileSelector \r\n      [accept]=\"accept\" \r\n      [attr.directory]=\"directory || undefined\" \r\n      [attr.webkitdirectory]=\"directory || undefined\"\r\n      [attr.mozdirectory]=\"directory || undefined\"\r\n      [attr.msdirectory]=\"directory || undefined\"\r\n      [attr.odirectory]=\"directory || undefined\"\r\n      [multiple]=\"multiple\"\r\n      (change)=\"uploadFiles($event)\" \r\n      class=\"ngx-file-drop__file-input\" \r\n    />\r\n\r\n    <ng-template #defaultContentTemplate>\r\n      <div *ngIf=\"dropZoneLabel\" class=\"ngx-file-drop__drop-zone-label\">{{dropZoneLabel}}</div>\r\n      <div *ngIf=\"showBrowseBtn\">\r\n        <input type=\"button\" [className]=\"browseBtnClassName\" value=\"{{browseBtnLabel}}\" (click)=\"openFileSelector($event)\" />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template\r\n      [ngTemplateOutlet]=\"contentTemplate || defaultContentTemplate\"\r\n      [ngTemplateOutletContext]=\"{ openFileSelector: openFileSelector }\">\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n",
                        styles: [".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:rgba(147,147,147,.5)}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        NgxFileDropComponent.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: core.Renderer2 }
            ];
        };
        NgxFileDropComponent.propDecorators = {
            accept: [{ type: core.Input }],
            directory: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            dropZoneLabel: [{ type: core.Input }],
            dropZoneClassName: [{ type: core.Input }],
            contentClassName: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            showBrowseBtn: [{ type: core.Input }],
            browseBtnClassName: [{ type: core.Input }],
            browseBtnLabel: [{ type: core.Input }],
            onFileDrop: [{ type: core.Output }],
            onFileOver: [{ type: core.Output }],
            onFileLeave: [{ type: core.Output }],
            contentTemplate: [{ type: core.ContentChild, args: [NgxFileDropContentTemplateDirective, { read: core.TemplateRef, static: false },] }],
            fileSelector: [{ type: core.ViewChild, args: ['fileSelector', { static: true },] }]
        };
        return NgxFileDropComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxFileDropModule = /** @class */ (function () {
        function NgxFileDropModule() {
        }
        NgxFileDropModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NgxFileDropComponent,
                            NgxFileDropContentTemplateDirective,
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            NgxFileDropComponent,
                            NgxFileDropContentTemplateDirective,
                        ],
                        providers: [],
                        bootstrap: [
                            NgxFileDropComponent
                        ],
                    },] }
        ];
        return NgxFileDropModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxFileDropComponent = NgxFileDropComponent;
    exports.NgxFileDropModule = NgxFileDropModule;
    exports.NgxFileDropEntry = NgxFileDropEntry;
    exports.ɵa = NgxFileDropContentTemplateDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-file-drop.umd.js.map