{"version":3,"sources":["ng://ngx-file-drop/ngx-file-drop/ngx-file-drop-entry.ts","ng://ngx-file-drop/ngx-file-drop/ngx-templates.directive.ts","ng://ngx-file-drop/ngx-file-drop/ngx-file-drop.component.ts","ng://ngx-file-drop/ngx-file-drop/ngx-file-drop.module.ts"],"names":["NgxFileDropEntry","relativePath","fileEntry","this","NgxFileDropContentTemplateDirective","Directive","args","selector","TemplateRef","template","NgxFileDropComponent","Object","defineProperty","prototype","_disabled","value","ngOnDestroy","dropEventTimerSubscription","unsubscribe","globalDragStartListener","globalDragEndListener","files","helperFormEl","fileInputPlaceholderEl","onDragOver","event","isDropzoneDisabled","isDraggingOverDropZone","onFileOver","emit","preventAndStop","onDragLeave","onFileLeave","dropFiles","dataTransfer","dropEffect","items","checkFiles","uploadFiles","target","resetFileInput","_this","i","item","entry","this_1","canGetAsEntry","webkitGetAsEntry","isFile","toUpload","name","addToQueue","isDirectory","traverseFileTree","fakeFileEntry","file","callback","length","timer","subscribe","numOfActiveReadEntries","onFileDrop","path","push","dirReader_1","createReader","entries_1","readEntries_1","readEntries","result","concat","toUpload_1","zone","run","fileSelector","nativeElement","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","renderer","insertBefore","appendChild","reset","removeChild","createElement","globalDraggingInProgress","disabled","stopPropagation","preventDefault","Component","NgZone","Renderer2","Input","Output","ContentChild","read","static","ViewChild","accept","directory","multiple","dropZoneLabel","dropZoneClassName","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","EventEmitter","openFileSelector","click","listen","evt","NgxFileDropModule","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class NgxFileDropEntry {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry\r\n    ) {\r\n    }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-file-drop-content-tmp]' })\r\nexport class NgxFileDropContentTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Subscription, timer } from 'rxjs';\r\n\r\nimport { NgxFileDropEntry } from './ngx-file-drop-entry';\r\nimport { FileSystemDirectoryEntry, FileSystemEntry, FileSystemFileEntry } from './dom.types';\r\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\r\n\r\n@Component({\r\n  selector: 'ngx-file-drop',\r\n  templateUrl: './ngx-file-drop.component.html',\r\n  styleUrls: ['./ngx-file-drop.component.scss'],\r\n})\r\nexport class NgxFileDropComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  public accept: string = '*';\r\n\r\n  @Input()\r\n  public directory: boolean = false;\r\n\r\n  @Input()\r\n  public multiple: boolean = true;\r\n\r\n  @Input()\r\n  public dropZoneLabel: string = '';\r\n\r\n  @Input()\r\n  public dropZoneClassName: string = 'ngx-file-drop__drop-zone';\r\n\r\n  @Input()\r\n  public contentClassName: string = 'ngx-file-drop__content';\r\n\r\n  public get disabled(): boolean { return this._disabled; }\r\n  @Input()\r\n  public set disabled(value: boolean) {\r\n    this._disabled = (value != null && `${value}` !== 'false');\r\n  }\r\n\r\n  @Input()\r\n  public showBrowseBtn: boolean = false;\r\n  @Input()\r\n  public browseBtnClassName: string = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n\r\n  @Input()\r\n  public browseBtnLabel: string = 'Browse files';\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<NgxFileDropEntry[]> = new EventEmitter();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter();\r\n\r\n  // custom templates\r\n  @ContentChild(NgxFileDropContentTemplateDirective, { read: TemplateRef, static: false }) contentTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('fileSelector', { static: true })\r\n  public fileSelector: ElementRef;\r\n\r\n  public isDraggingOverDropZone: boolean = false;\r\n\r\n  private globalDraggingInProgress: boolean = false;\r\n  private globalDragStartListener: () => void;\r\n  private globalDragEndListener: () => void;\r\n\r\n  private files: NgxFileDropEntry[] = [];\r\n  private numOfActiveReadEntries: number = 0;\r\n\r\n  private helperFormEl: HTMLFormElement | null = null;\r\n  private fileInputPlaceholderEl: HTMLDivElement | null = null;\r\n\r\n  private dropEventTimerSubscription: Subscription | null = null;\r\n\r\n  private _disabled: boolean = false;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt: Event) => {\r\n      this.globalDraggingInProgress = true;\r\n    });\r\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt: Event) => {\r\n      this.globalDraggingInProgress = false;\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n      this.dropEventTimerSubscription = null;\r\n    }\r\n    this.globalDragStartListener();\r\n    this.globalDragEndListener();\r\n    this.files = [];\r\n    this.helperFormEl = null;\r\n    this.fileInputPlaceholderEl = null;\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (!this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public dropFiles(event: DragEvent): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      this.isDraggingOverDropZone = false;\r\n      if (event.dataTransfer) {\r\n        event.dataTransfer.dropEffect = 'copy';\r\n        let items: FileList | DataTransferItemList;\r\n        if (event.dataTransfer.items) {\r\n          items = event.dataTransfer.items;\r\n        } else {\r\n          items = event.dataTransfer.files;\r\n        }\r\n        this.preventAndStop(event);\r\n        this.checkFiles(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  public openFileSelector = (event?: MouseEvent): void => {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      (this.fileSelector.nativeElement as HTMLInputElement).click();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes the change event of the file input and adds the given files.\r\n   * @param Event event\r\n   */\r\n  public uploadFiles(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (event.target) {\r\n        const items = (event.target as HTMLInputElement).files || ([] as any);\r\n        this.checkFiles(items);\r\n        this.resetFileInput();\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkFiles(items: FileList | DataTransferItemList): void {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      let entry: FileSystemEntry | null = null;\r\n      if (this.canGetAsEntry(item)) {\r\n        entry = item.webkitGetAsEntry();\r\n      }\r\n\r\n      if (!entry) {\r\n        if (item) {\r\n          const fakeFileEntry: FileSystemFileEntry = {\r\n            name: (item as File).name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback: (filea: File) => void): void => {\r\n              callback(item as File);\r\n            },\r\n          };\r\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\r\n          this.addToQueue(toUpload);\r\n        }\r\n\r\n      } else {\r\n        if (entry.isFile) {\r\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(entry.name, entry);\r\n          this.addToQueue(toUpload);\r\n\r\n        } else if (entry.isDirectory) {\r\n          this.traverseFileTree(entry, entry.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n    }\r\n    this.dropEventTimerSubscription = timer(200, 200)\r\n      .subscribe(() => {\r\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n          const files = this.files;\r\n          this.files = [];\r\n          this.onFileDrop.emit(files);\r\n        }\r\n      });\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string): void {\r\n    if (item.isFile) {\r\n      const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\r\n      this.files.push(toUpload);\r\n\r\n    } else {\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries: FileSystemEntry[] = [];\r\n\r\n      const readEntries = () => {\r\n        this.numOfActiveReadEntries++;\r\n        dirReader.readEntries((result) => {\r\n          if (!result.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\r\n              this.zone.run(() => {\r\n                this.addToQueue(toUpload);\r\n              });\r\n\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                this.zone.run(() => {\r\n                  this.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(result);\r\n            readEntries();\r\n          }\r\n\r\n          this.numOfActiveReadEntries--;\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n   */\r\n  private resetFileInput(): void {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      const fileInputEl = this.fileSelector.nativeElement as HTMLInputElement;\r\n      const fileInputContainerEl = fileInputEl.parentElement;\r\n      const helperFormEl = this.getHelperFormElement();\r\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n\r\n      // Just a quick check so we do not mess up the DOM (will never happen though).\r\n      if (fileInputContainerEl !== helperFormEl) {\r\n        // Insert the form input placeholder in the DOM before the form input element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n        // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n        this.renderer.appendChild(helperFormEl, fileInputEl);\r\n        // Reset the form, thus clearing the input element of any files.\r\n        helperFormEl.reset();\r\n        // Add the file input back to the DOM in place of the file input placeholder element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n        // Remove the input placeholder from the DOM\r\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML form element as a helper element to clear the file input element.\r\n   */\r\n  private getHelperFormElement(): HTMLFormElement {\r\n    if (!this.helperFormEl) {\r\n      this.helperFormEl = this.renderer.createElement('form') as HTMLFormElement;\r\n    }\r\n\r\n    return this.helperFormEl;\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n   */\r\n  private getFileInputPlaceholderElement(): HTMLDivElement {\r\n    if (!this.fileInputPlaceholderEl) {\r\n      this.fileInputPlaceholderEl = this.renderer.createElement('div') as HTMLDivElement;\r\n    }\r\n\r\n    return this.fileInputPlaceholderEl;\r\n  }\r\n\r\n  private canGetAsEntry(item: any): item is DataTransferItem {\r\n    return !!item.webkitGetAsEntry;\r\n  }\r\n\r\n  private isDropzoneDisabled(): boolean {\r\n    return (this.globalDraggingInProgress || this.disabled);\r\n  }\r\n\r\n  private addToQueue(item: NgxFileDropEntry): void {\r\n    this.files.push(item);\r\n  }\r\n\r\n  private preventAndStop(event: Event): void {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxFileDropComponent } from './ngx-file-drop.component';\r\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxFileDropComponent,\r\n    NgxFileDropContentTemplateDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    NgxFileDropComponent,\r\n    NgxFileDropContentTemplateDirective,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [\r\n    NgxFileDropComponent\r\n  ],\r\n})\r\nexport class NgxFileDropModule {}\r\n"]}