"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageVersionFromPackageJson = exports.addModuleToImports = exports.installPackageJsonDependencies = exports.addPackageJsonDependencies = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const helpers_1 = require("../helpers");
const config_1 = require("@schematics/angular/utility/config");
const schematics_2 = require("@angular/cdk/schematics");
/** Loads the full version from the given Angular package gracefully. */
function loadPackageVersionGracefully() {
    try {
        console.log('@angular-material-extensions/select-country version = ', require(`../../package.json`).version);
        return require(`../../package.json`).version;
    }
    catch (_a) {
        return null;
    }
}
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function addPackageJsonDependencies() {
    return (host, context) => {
        const dependencies = [
            {
                type: helpers_1.NodeDependencyType.Default, version: loadPackageVersionGracefully()
                    || '1.3.0', name: '@angular-material-extensions/select-country'
            },
            { type: helpers_1.NodeDependencyType.Default, version: '^1.2.6', name: 'svg-country-flags' },
        ];
        dependencies.forEach(dependency => {
            helpers_1.addPackageJsonDependency(host, dependency);
            context.logger.log('info', `‚úÖÔ∏è Added "${dependency.name}" into ${dependency.type}`);
        });
        return host;
    };
}
exports.addPackageJsonDependencies = addPackageJsonDependencies;
function installPackageJsonDependencies() {
    return (host, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `üîç Installing packages...`);
        return host;
    };
}
exports.installPackageJsonDependencies = installPackageJsonDependencies;
function addModuleToImports(options) {
    return (host, context) => {
        const workspace = config_1.getWorkspace(host);
        const project = schematics_2.getProjectFromWorkspace(workspace, 
        // Takes the first project in case it's not provided by CLI
        options.project ? options.project : Object.keys(workspace.projects)[0]);
        const moduleName = `MatSelectCountryModule`;
        schematics_2.addModuleImportToRootModule(host, moduleName, '@angular-material-extensions/select-country', project);
        context.logger.log('info', `‚úÖÔ∏è "${moduleName}" is imported`);
        schematics_2.addModuleImportToRootModule(host, 'HttpClientModule', '@angular/common/http', project);
        context.logger.log('info', `‚úÖÔ∏è "HttpClientModule" is imported`);
        return host;
    };
}
exports.addModuleToImports = addModuleToImports;
/** Gets the version of the specified package by looking at the package.json in the given tree. */
function getPackageVersionFromPackageJson(tree, name) {
    if (!tree.exists('package.json')) {
        return null;
    }
    // tslint:disable-next-line:no-non-null-assertion
    const packageJson = JSON.parse(tree.read('package.json').toString('utf8'));
    if (packageJson.dependencies && packageJson.dependencies[name]) {
        return packageJson.dependencies[name];
    }
    return null;
}
exports.getPackageVersionFromPackageJson = getPackageVersionFromPackageJson;
function addLibAssetsToAssets(options) {
    return (host, context) => {
        const lib = '@angular-material-extensions/select-country';
        const assetPath = 'node_modules/svg-country-flags/svg';
        try {
            const angularJsonFile = host.read('angular.json');
            if (angularJsonFile) {
                const angularJsonFileObject = JSON.parse(angularJsonFile.toString('utf-8'));
                const project = options.project ? options.project : Object.keys(angularJsonFileObject.projects)[0];
                const projectObject = angularJsonFileObject.projects[project];
                const assets = projectObject.architect.build.options.assets;
                context.logger.log('info', `"${assets}`);
                assets.push({
                    glob: '**/*',
                    input: assetPath,
                    output: 'assets/svg-country-flags/svg'
                });
                host.overwrite('angular.json', JSON.stringify(angularJsonFileObject, null, 2));
                context.logger.log('info', `‚úÖÔ∏è Added "${lib}" icons to assets`);
            }
        }
        catch (e) {
            context.logger.log('error', `üö´ Failed to add the icons "${lib}" to assets`);
            context.logger.log('error', e);
        }
        return host;
    };
}
function default_1(options) {
    return schematics_1.chain([
        options && options.skipPackageJson ? schematics_1.noop() : addPackageJsonDependencies(),
        options && options.skipPackageJson ? schematics_1.noop() : installPackageJsonDependencies(),
        options && options.skipModuleImport ? schematics_1.noop() : addModuleToImports(options),
        options && options.skipPolyfill ? schematics_1.noop() : addLibAssetsToAssets(options)
    ]);
}
exports.default = default_1;
//# sourceMappingURL=index.js.map