import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { COUNTRIES_DB } from './db';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, startWith, takeUntil } from 'rxjs/operators';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export class MatSelectCountryComponent {
    constructor() {
        this.countries = COUNTRIES_DB;
        this.placeHolder = 'Select country';
        this.onCountrySelected = new EventEmitter();
        this.countryFormControl = new FormControl();
        this.debounceTime = 300;
        this.filterString = '';
        this.modelChanged = new Subject();
        this.propagateChange = (_) => {
        };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.propagateChange(this._value);
    }
    ngOnInit() {
        this.subscription = this.modelChanged
            .pipe(startWith(''), debounceTime(this.debounceTime))
            .subscribe((value) => {
            this.filterString = value;
            this._filter(value);
        });
    }
    ngOnChanges(changes) {
        if (changes.country) {
            if (changes.country.currentValue) {
                const newValue = changes.country.currentValue.toUpperCase();
                this.value = this.countries.find(country => country.name.toUpperCase() === newValue
                    || country.alpha2Code === newValue
                    || country.alpha3Code === newValue
                    || country.numericCode === newValue);
            }
            else {
                this.value = undefined;
            }
        }
    }
    onBlur() {
        if (this.countryFormControl.value || !this.nullable) {
            this.countryFormControl.setValue(this.value ? this.value.name : '');
        }
        else if (this.value) {
            this.value = null;
            this.onCountrySelected.emit(null);
        }
    }
    onOptionsSelected($event) {
        this.value = this.countries.find(country => country.name === $event.option.value);
        this.onCountrySelected.emit(this.value);
    }
    writeValue(obj) {
        if (obj) {
            this.value = obj;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        // throw new Error('Method not implemented.');
    }
    setDisabledState(isDisabled) {
        // throw new Error('Method not implemented.');
    }
    autocompleteScroll() {
        if (this.itemsLoadSize) {
            setTimeout(() => {
                if (this.statesAutocompleteRef &&
                    this.autocompleteTrigger &&
                    this.statesAutocompleteRef.panel) {
                    fromEvent(this.statesAutocompleteRef.panel.nativeElement, 'scroll')
                        .pipe(takeUntil(this.autocompleteTrigger.panelClosingActions))
                        .subscribe(() => {
                        const scrollTop = this.statesAutocompleteRef.panel.nativeElement
                            .scrollTop;
                        const scrollHeight = this.statesAutocompleteRef.panel.nativeElement
                            .scrollHeight;
                        const elementHeight = this.statesAutocompleteRef.panel.nativeElement
                            .clientHeight;
                        const atBottom = scrollHeight === scrollTop + elementHeight;
                        if (atBottom) {
                            // fetch more data if not filtered
                            if (this.filterString === '') {
                                const fromIndex = this.filteredOptions.length;
                                const toIndex = +this.filteredOptions.length + +this.itemsLoadSize;
                                this.filteredOptions = [...this.filteredOptions, ...this.countries.slice(fromIndex, toIndex)];
                            }
                        }
                    });
                }
            });
        }
    }
    inputChanged(value) {
        this.modelChanged.next(value);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        // if not filtered, fetch reduced array
        if (this.itemsLoadSize && filterValue === '') {
            this.filteredOptions = this.countries.slice(0, this.itemsLoadSize);
        }
        else {
            this.filteredOptions = this.countries.filter((option) => option.name.toLowerCase().includes(filterValue)
                || option.alpha2Code.toLowerCase().includes(filterValue)
                || option.alpha3Code.toLowerCase().includes(filterValue));
        }
    }
}
MatSelectCountryComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-select-country',
                template: "<form>\n  <mat-form-field [appearance]=\"appearance\">\n    <mat-label *ngIf=\"label\">{{label}}</mat-label>\n    <mat-icon [svgIcon]=\"this.value?.alpha2Code.toLowerCase()\" class=\"mr-12 s-20 secondary-text\"\n              matSuffix></mat-icon>\n    <input (blur)=\"onBlur()\" (input)=\"inputChanged($event.target.value)\" [class]=\"class\" [disabled]=\"disabled\"\n           [formControl]=\"countryFormControl\" [matAutocomplete]=\"countryAutocomplete\"\n           [placeholder]=\"placeHolder\"\n           [readonly]=\"readonly\" [value]=\"value?.name\" aria-label=\"country\"\n           matInput type=\"text\">\n    <mat-autocomplete #countryAutocomplete=\"matAutocomplete\" (opened)=\"autocompleteScroll()\"\n                      (optionSelected)=\"onOptionsSelected($event)\">\n      <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country?.name\">\n        <mat-icon [svgIcon]=\"country?.alpha2Code.toLowerCase()\"></mat-icon>\n        <small>{{country?.name}} - {{country?.alpha3Code}}</small>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSelectCountryComponent),
                        multi: true
                    }
                ],
                styles: [""]
            },] }
];
MatSelectCountryComponent.propDecorators = {
    appearance: [{ type: Input }],
    country: [{ type: Input }],
    countries: [{ type: Input }],
    label: [{ type: Input }],
    placeHolder: [{ type: Input }],
    disabled: [{ type: Input }],
    nullable: [{ type: Input }],
    readonly: [{ type: Input }],
    class: [{ type: Input }],
    itemsLoadSize: [{ type: Input }],
    statesAutocompleteRef: [{ type: ViewChild, args: ['countryAutocomplete',] }],
    autocompleteTrigger: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }],
    onCountrySelected: [{ type: Output }],
    _value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,