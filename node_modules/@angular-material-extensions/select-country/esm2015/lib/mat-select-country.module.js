import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MatSelectCountryComponent } from './mat-select-country.component';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule, MatIconRegistry } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatMenuModule } from '@angular/material/menu';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { COUNTRIES_DB } from './db';
/**
 * @author Anthony Nahas
 * @since 06.11.19
 */
export class MatSelectCountryModule {
    constructor(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    registerCountries() {
        for (const country of COUNTRIES_DB) {
            const countryAlpha2Code = country.alpha2Code.toLowerCase();
            this.iconRegistry
                .addSvgIcon(countryAlpha2Code, this.sanitizer
                .bypassSecurityTrustResourceUrl(`assets/svg-country-flags/svg/${countryAlpha2Code}.svg`));
        }
    }
}
MatSelectCountryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MatSelectCountryComponent],
                imports: [
                    CommonModule,
                    // Forms
                    FormsModule,
                    ReactiveFormsModule,
                    // Material
                    MatButtonModule,
                    MatMenuModule,
                    MatInputModule,
                    MatAutocompleteModule,
                    MatIconModule
                ],
                exports: [MatSelectCountryComponent]
            },] }
];
MatSelectCountryModule.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9zZWxlY3QtY291bnRyeS9zcmMvbGliL21hdC1zZWxlY3QtY291bnRyeS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDckUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxhQUFhLEVBQUUsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHbEM7OztHQUdHO0FBbUJILE1BQU0sT0FBTyxzQkFBc0I7SUFFakMsWUFBb0IsWUFBNkIsRUFBVSxTQUF1QjtRQUE5RCxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQ2hGLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxpQkFBaUI7UUFDZixLQUFLLE1BQU0sT0FBTyxJQUFJLFlBQVksRUFBRTtZQUNsQyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0QsSUFBSSxDQUFDLFlBQVk7aUJBQ2QsVUFBVSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxTQUFTO2lCQUMxQyw4QkFBOEIsQ0FBQyxnQ0FBZ0MsaUJBQWlCLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDL0Y7SUFDSCxDQUFDOzs7WUEvQkYsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLHlCQUF5QixDQUFDO2dCQUN6QyxPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFFWixRQUFRO29CQUNSLFdBQVc7b0JBQ1gsbUJBQW1CO29CQUVuQixXQUFXO29CQUNYLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixjQUFjO29CQUNkLHFCQUFxQjtvQkFDckIsYUFBYTtpQkFDZDtnQkFDRCxPQUFPLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzthQUNyQzs7O1lBN0JzQixlQUFlO1lBSTlCLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXRTZWxlY3RDb3VudHJ5Q29tcG9uZW50fSBmcm9tICcuL21hdC1zZWxlY3QtY291bnRyeS5jb21wb25lbnQnO1xuaW1wb3J0IHtNYXRBdXRvY29tcGxldGVNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2F1dG9jb21wbGV0ZSc7XG5pbXBvcnQge01hdEJ1dHRvbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uJztcbmltcG9ydCB7TWF0SWNvbk1vZHVsZSwgTWF0SWNvblJlZ2lzdHJ5fSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7TWF0SW5wdXRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcbmltcG9ydCB7TWF0TWVudU1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvbWVudSc7XG5pbXBvcnQge0Zvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0RvbVNhbml0aXplcn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge0NPVU5UUklFU19EQn0gZnJvbSAnLi9kYic7XG5cblxuLyoqXG4gKiBAYXV0aG9yIEFudGhvbnkgTmFoYXNcbiAqIEBzaW5jZSAwNi4xMS4xOVxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtNYXRTZWxlY3RDb3VudHJ5Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcblxuICAgIC8vIEZvcm1zXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcblxuICAgIC8vIE1hdGVyaWFsXG4gICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgIE1hdE1lbnVNb2R1bGUsXG4gICAgTWF0SW5wdXRNb2R1bGUsXG4gICAgTWF0QXV0b2NvbXBsZXRlTW9kdWxlLFxuICAgIE1hdEljb25Nb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW01hdFNlbGVjdENvdW50cnlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE1hdFNlbGVjdENvdW50cnlNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaWNvblJlZ2lzdHJ5OiBNYXRJY29uUmVnaXN0cnksIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgICB0aGlzLnJlZ2lzdGVyQ291bnRyaWVzKCk7XG4gIH1cblxuICByZWdpc3RlckNvdW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGNvdW50cnkgb2YgQ09VTlRSSUVTX0RCKSB7XG4gICAgICBjb25zdCBjb3VudHJ5QWxwaGEyQ29kZSA9IGNvdW50cnkuYWxwaGEyQ29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5pY29uUmVnaXN0cnlcbiAgICAgICAgLmFkZFN2Z0ljb24oY291bnRyeUFscGhhMkNvZGUsIHRoaXMuc2FuaXRpemVyXG4gICAgICAgICAgLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChgYXNzZXRzL3N2Zy1jb3VudHJ5LWZsYWdzL3N2Zy8ke2NvdW50cnlBbHBoYTJDb2RlfS5zdmdgKSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==